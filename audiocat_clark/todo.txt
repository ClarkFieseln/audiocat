General:
########
- derive more complex/secure pwd from user-pwd using a hash algorithm (but without salting!)
  For deriving more secure passwords, key derivation functions (KDFs) like PBKDF2, bcrypt, and Argon2 are recommended. 
  These functions are specifically designed to be computationally intensive, making brute-force attacks more difficult. 
  They achieve this by applying the hash function multiple times (iterations) *** and using a salt *** -> can avoid this step?
- finish PyPi project (easy: call ./audiocat <arg> from within audiocat.py which in turn shall be called with <arg>)
- make some demo videos of communication with cables, smartphones, walkie-talkies, land line telephone (add links to project)
- write an article for Code Project
- provide a version file which can be read in audiocat, audiocat.py, __init__.py, setup.py, etc....in order to have a consistent version
- add audiocat image to PyPi project
- test with Virtual Machine
- close all open terminals after leaving with Ctrl+C (at the moment the user has to do this himself)
- remove:
  - TRAILER, otherwise it collides with ACK
  - delay before ACK...was needed because of TRAILER, but now we want to remove it
  - before removing try options Preamble+Msg+Trailer, Preamble+Msg, Msg+Trailer, Msg -> what works best?
- investigate with oscilloscope (for different configurations):
  - signal form distorted? e.g. when using online devices with a messanger application
  - DC or ground level of the connection varies with the amount of data sent? this would explain why a "constant" cyclic transmission of [keepalive] keeps this stable?
  - echos?
  - delays?
- improvmeent:
  additional measures like signature verification as recommended here: https://github.com/ClarkFieseln/AC4QGP/issues/2
- investigate:
  - how to deal with system sounds
    (with 9.6 kbaud it was still possible to transmit information with ACKs even as music was played in the background, but the comm. errors increased)
- investigate:
  - if signal distored when streo-speaker is used (e.g. due to delayed L and R outputs?) vs. only right output (cleaner signal?)
  - only R output goes through sometimes...why?
  - check points above with other cable configurations and adapters
- improvement:
  - with every call to mmshellout.sh we add 15ms delay when loading the state information at the beginning of the script
    (a similar situation occurs with mmack.sh)
  - a possible improvement (?) is e.g. to modify the scripts so they are executed only once and read permanently e.g. from a fifo or from a file
    *** a drawback is the need for synchronization between them and also with mmrx.py to ensure only one transmisison at a time
        - sync using files or giving feedback through output fifo / file or just stdout?
- traffic masking? e.g. if minimodem TX continuously...can hide also metadata, e.g. nr. of messages, etc.
- PEP8 for python code
- SYNC between c and s needed? --> adding different delays before sending [keepalive] in RS -s leads to different stability?
- support for password-protected pre-shared keys (PSK) -> see GPG
- add support of signature
- provide "forward secrecy" meaning retrospective decryption of unlogged messages is impossible
  (warning: PGP lacks forward secrecy, once private RSA key exfiltrated all past and fufure communication can be decrypted passively)
- check if we can specify the audio interface
  for the use case with 2 offline-devices: 
  the Receiver offline-device could as well receive over a 2nd audio interface the data being sent and then decrypt it to show the complete conversation on the same screen:
                        ----->  receiver     <--
          internet-PC                           | 2nd. audio interface 
                        <-----  transmitter  -->
- poort .sh scripts to python (process or thread) to gain speed, readability, etc.
  (probably no gain, python and shell-scripts are slow -> a better option would be to implement everything e.g. in C or C++)
- shell: interactive sessions, e.g. with calc, during remote shell are possible
         but this is not the case when calling python -> implement (move session to sub-shell of?)
- shell: the command clear is executed only after a new command is executed. Solution?
- shell: starting programs, e.g. gedit, works but then?
- plausibility checks on configuration parameters
- investigate the need to use [keepalive] messages:
  Up to now we don't actually understand "why" we need [keepalive] messasges but, we know the behavior for different values of retransmission_timeout_sec on 2 PCs:
  - 0.0, 0.0: retransmissions sent
  - 2.0, 2.0: retransmissions sent
  - 3.0, 3.0: retransmissions sent
  - 4.0, 4.0: OK ***
  - 5.0, 5.0: unstable connection (?)
  The roundtrip delays (1sec, 1.5sec) may be related to this problem
  Or it may be a kind of "power-down/efficiency" mode of the audio-interface/minimodem
  Or it may be that the DC level of the connection varies with the amount of data sent and a "constant" cyclic transmissions keeps DC stable
- extend session initialization to support AUTONEGOTIATION, that is, agreement on:
  - protocol version
  - BAUD
  - NEED_ACK
  - etc.
  Use default 1200 baud for initialzation, then switch to agreed transfer rate.
  *** ADJUST VOLUMES on both sides AUTOMATICALLY during session initialization also !!! ***
  *****************************************************************************************
- GUI like AC4QGP:
  "merge" AC4QGP and audiocat or just "pipe" adapted AC4QGP to audiocat
  (we may need to use AT commands or something like that)
- similar to TFC-Installation: protection measures (see here: https://github.com/maqp/tfc/wiki/Threat-model)
TLS-MITM attack during installation
As long as the user has a way (face-to-face meeting with the developer or web of trust) to obtain the authentic fingerprint of the PGP key used to sign the installer, installation is mostly secure against MITM attacks. TFC is installed with a one-liner, the pinned SHA256 fingerprint of which authenticates the 4096-bit PGP/RSA signature verification key, which in turn authenticates the installer. If the attacker has a sufficient universal quantum computer that is capable of running Shor's algorithm, the authenticity of the installer cannot be reliably guaranteed with PGP signatures. The installer comes with pinned SHA512 hashes of all files downloaded from TFC's GitHub repository. These files include the requirements*.txt-files that contain the SHA512 hashes for dependencies downloaded over PIP. However, TFC requires dependencies (namely git, libssl-dev, net-tools, python3-pip, python3-setuptools, python3-tk, and Tor) that are downloaded with APT, and while the related public signature verification key is pinned to the OS, the exfiltration security of the private signing keys of third parties cannot be guaranteed.

mmtx.sh:
########
- prevent user input during transmission (indicated by missing prompt cursor)?
- create a new optional parameter to determine the round-trip delay "automatically" and use this value i.o. retransmission_timeout_sec
  this value can also be checked during the user session in order to monitor it dinamically e.g. in order to re-adjust it

mmrx.py:
########
- with this file as base implement a SNIFFER (mmrxsniff.sh)
- use regular expressions to detect damaged "-----BEGIN PGP MESSAGE-----" and "-----END PGP MESSAGE-----" and restore them
- replace non-printable character detected in exception to data = infile.readline() instead of flushing the data received (there may be useful data inside)
