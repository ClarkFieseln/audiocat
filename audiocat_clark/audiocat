#!/bin/bash

# read tmp path
TMP_PATH=$(cat cfg/tmp_path)

# first remove previous temporary working folder
if [ -d "${HOME}${TMP_PATH}" ]; then
    rm -r "${HOME}${TMP_PATH}"
fi

# create new temporary working folder
mkdir -p "${HOME}${TMP_PATH}"

# copy files to tmp path
cp -r "./cfg" "${HOME}${TMP_PATH}"
cp -r "./state" "${HOME}${TMP_PATH}"
cp -r "./tmp" "${HOME}${TMP_PATH}"

# read configuration from files copied in tmp path
BAUD=$(cat ${HOME}${TMP_PATH}/cfg/baud)
SYNCBYTE=$(cat ${HOME}${TMP_PATH}/cfg/syncbyte)
CONFIDENCE=$(cat ${HOME}${TMP_PATH}/cfg/confidence)
LIMIT=$(cat ${HOME}${TMP_PATH}/cfg/limit)
TERMINAL=$(cat ${HOME}${TMP_PATH}/cfg/terminal)

create_fifos()
{
    if [ "$1" == "-s" ] || [ "$1" == "--rs" ] || [ "$1" == "--reverse-shell" ] ; then
        PIPE_SHELL_IN="${HOME}${TMP_PATH}/tmp/pipe_shell_in"
        PIPE_SHELL_OUT="${HOME}${TMP_PATH}/tmp/pipe_shell_out"
        if [ -p ${PIPE_SHELL_IN} ] || [ -f ${PIPE_SHELL_IN} ]; then
          rm ${PIPE_SHELL_IN}
        fi
        if [ -p ${PIPE_SHELL_OUT} ] || [ -f ${PIPE_SHELL_OUT} ]; then
          rm ${PIPE_SHELL_OUT}
        fi
        mkfifo ${PIPE_SHELL_IN}
        mkfifo ${PIPE_SHELL_OUT}
    elif [ "$1" == "-f" ] || [ "$1" == "--file" ] ; then
        PIPE_FILE_IN="${HOME}${TMP_PATH}/tmp/pipe_file_in"
        PIPE_FILE_OUT="${HOME}${TMP_PATH}/tmp/pipe_file_out"
        if [ -p ${PIPE_FILE_IN} ] || [ -f ${PIPE_FILE_IN} ]; then
          rm ${PIPE_FILE_IN}
        fi
        if [ -p ${PIPE_FILE_OUT} ] || [ -f ${PIPE_FILE_OUT} ]; then
          rm ${PIPE_FILE_OUT}
        fi
        mkfifo ${PIPE_FILE_IN}
        mkfifo ${PIPE_FILE_OUT}
    fi
}

ask_password()
{
    while true
    do
        while true
        do
            echo -n "password: "
            read -ers PASSWORD1
            echo ""
            # 2> /dev/null shall prevent showing the password if some error occurs
            if [ ! "${PASSWORD1}" == "" ] 2> /dev/null
            then
                break
            else
                echo "Password cannot be empty!"
            fi
        done
        echo -n "confirm password: "
        read -ers PASSWORD
        echo ""
        # 2> /dev/null shall prevent showing the password if some error occurs
        [ "${PASSWORD1}" == "${PASSWORD}" ] 2> /dev/null && break
        echo "Passwords dont match!"
    done
}

echo_help()
{
    echo "usage: audiocat [-c|-s]    		 
    		 -c, --chat
    		 -s, --rs, --reverse-shell (to execute a command as sudo type: echo \"<pwd>\" | sudo -k -S <cmd>)
    		 -f, --file, --file-transfer
    		 -p, --probe (to check connectivity and adjust the volumes if required)
    		 -V, --version
    		 -h, --help
    		 -i, --image
    		 
Audiocat is a command-line utility that reads and writes encrypted data across peer-to-peer audio connections, using minimodem and gpg.
It is a powerful tool that can be combined with any audio infrastructure (like PSTN, cellular network, internet, radio) to provide a secure communication channel through an audio tunnel.
The audio interfaces behave like data-diodes, each allowing unidirectional data transmission only, thus preventing data-leaks and malware-injection.
This enables an "enhanced"-end-to-end encryption (E-E2EE) which notably increases security and privacy, especially when the end devices are completely offline (air-gapped-system), providing an effective barrier against "legal or illegal" client-side-scanning!
See also <https://www.codeproject.com/Articles/5295970/Audio-Chat-for-Quite-Good-Privacy-AC4QGP>"
}

echo_image()
{
    echo "                                                                 #########.                                                                 
                                                        #####                 #####-                                                        
                                                   ###                               ###                                                    
                                                ##                                       ###                                                
                                             ##                                             ##                                              
                                           ##                                                  ##                                           
                                         ##                                                      #                                          
                                       ##                                                         ##                                        
                                      ##                                                            #                                       
                                     ##                                                              #                                      
                               #########                                                           #########                                
                               #########   #                                                ###### #########                                
                               ######### #   ####                                        ###     ###########                                
                               #########-# ##    ##                                    ##    ### ###########                                
                               #########-#   ##    ##.                               ##    #.    ###########                                
                               ######### #    ##     +#                            ##.    # #     ##########                                
                               #########.#  #####      #  #######-      #######   ##     ##.##    ##########                                
                               ######### #      ##   ###-                        ###    ######    ##########                                
                               #########-#  ########                                 ### -###     ##########                                
                               ######### #     ##                                       ##       ###########                                
                               ######### ##  #-                                            ##    # #########                                
                               ########  ###                                                 #. ## ###########                              
                                         ##                                                   ###              ###                          
                                        #                                                       #                 .##                       
                                       #                                                         #                   ###                    
                                      #              ######                  #####                #                     ##                  
                                     ##            +#      #               #      ##               #                     ##                 
                                     #                           #####                             #                       ##               
                             ###################                #######                 #####      ##   #####               ##              
                       ###          ##            ####             #            #######            ##        ##              ##             
                    ###             +#                  #+   #     #        ###                    ##          ##             #             
                                 ####################             ###  #   #  #####+++#---+######  #+            #            ##            
                            ###+     #                     ##    #- ##     #                      ###                         ##            
                          ##          #                       #       #####                       ## .##                      #+            
                        ##            ##                                                          #    ##                     #             
                        #              ##                                                        #                           ##             
                                        ##                                                     ##                           -#              
                                          #                                                   ##                            ##              
                                           ##                                               ##                             ##               
                                             ##                                           ##                     ++-+### ##                 
                                               .##                                     +##                  #############                   
                                                  ###                               ###                     ###########+                    
                                                      ####                     ####                            ##                           
                                                            #################"
}

echo_parameters()
{
    echo "baud = $BAUD"
    echo "syncbyte = $SYNCBYTE"
    echo "confidence = $CONFIDENCE"
    echo "limit = $LIMIT"
    echo "terminal = $TERMINAL"
}

echo_version()
{
    echo "audiocat 0.0.1
MIT License: <https://opensource.org/license/mit>.    
Copyright (C) 2024 Clark Fieseln
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law."
}

if [ "$1" == "" ] ; then
    echo "audiocat: *** you must specify an option ***"
    echo_help
elif [ "$1" == "-c" ] || [ "$1" == "--chat" ] ; then
    ask_password
    ${TERMINAL} ./mmtx.sh "${PASSWORD}" &
    # wait a little bit so the transmitter can initialize the state flags
    sleep 0.5    
    echo_parameters
    source rx.src | python3 mmrx.py "${PASSWORD}" $1
elif [ "$1" == "-f" ] || [ "$1" == "--file" ] ; then
    ask_password
    create_fifos "$1"
    ${TERMINAL} ./mmtxfile.sh "${PASSWORD}" &
    # wait a little bit so the transmitter can initialize the state flags
    sleep 0.5
    # track input files
    ${TERMINAL} cat ${PIPE_FILE_IN} &
    # we don't echo_parameters in -f mode
    source rx.src | python3 mmrx.py "${PASSWORD}" $1
elif [ "$1" == "-s" ] || [ "$1" == "--rs" ] || [ "$1" == "--reverse-shell" ] ; then
    ask_password
    create_fifos "$1"
    # create persistent shell to run in background with input and output pipes
    while true; do /bin/sh &> ${PIPE_SHELL_OUT}; done 0< ${PIPE_SHELL_IN} &
    echo_parameters
    source rx.src | python3 mmrx.py "${PASSWORD}" $1
elif [ "$1" == "-p" ] || [ "$1" == "--probe" ] ; then
    while :
    do        
        echo "[test]" | source tx.src
    done
elif [ "$1" == "-V" ] || [ "$1" == "--version" ] ; then
    echo_version
elif [ "$1" == "-h" ] || [ "$1" == "--help" ] ; then
    echo_help
elif [ "$1" == "-i" ] || [ "$1" == "--image" ] ; then
    echo_image  
else
    echo "audiocat: invalid option"
fi
